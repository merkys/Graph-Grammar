#!/usr/bin/perl

use strict;
use warnings;

use ChemOnomatopist::Util::Graph qw( graph_replace );
use Chemistry::OpenSMILES::Parser;
use Graph::Grammar;
use Graph::Writer::Dot;
use Scalar::Util qw( blessed );

sub is_C { return exists $_[1]->{symbol} && ucfirst( $_[1]->{symbol} ) eq 'C' }
sub is_H { return exists $_[1]->{symbol} && ucfirst( $_[1]->{symbol} ) eq 'H' }
sub is_N { return exists $_[1]->{symbol} && ucfirst( $_[1]->{symbol} ) eq 'N' }
sub is_O { return exists $_[1]->{symbol} && ucfirst( $_[1]->{symbol} ) eq 'O' }
sub is_S { return exists $_[1]->{symbol} && ucfirst( $_[1]->{symbol} ) eq 'S' }

sub is_C_chain { return exists $_[1]->{type} && $_[1]->{type} eq 'C_chain' }
sub is_ketone  { return exists $_[1]->{type} && $_[1]->{type} eq 'ketone' }

sub is_NH2 { return exists $_[1]->{type} && $_[1]->{type} eq 'NH2' }

sub anything { return 1 }

my @rules = (
    [ \&is_O, \&is_H, \&anything, NO_MORE_VERTICES, sub { graph_replace( $_[0], { type => 'hydroxy' }, @_[1..2] ) } ],
    [ \&is_O, \&anything, NO_MORE_VERTICES, { type => 'ketone' } ],
    [ \&is_O, \&is_alkane, \&anything, NO_MORE_VERTICES, { type => 'oxyalkane' } ],

    # Rules to detect alkanes of any length
    [ \&is_C, ( \&is_H ) x 3, \&anything, NO_MORE_VERTICES, sub { graph_replace( $_[0], { type => 'C_chain', length => 1 }, @_[1..4] ) } ],
    [ \&is_C, ( \&is_H ) x 2, \&anything, NO_MORE_VERTICES, sub { graph_replace( $_[0], { type => 'C_chain', length => 1 }, @_[1..3] ) } ], # terminal alkene
    [ \&is_C, \&is_C_chain, ( \&is_H ) x 2, sub { graph_replace( $_[0], { type => 'C_chain', length => $_[2]->{length} + 1 }, @_[1..4] ) } ],
    [ \&is_C, ( \&is_C_chain ) x 2, ( \&is_H ) x 2, NO_MORE_VERTICES, sub { graph_replace( shift @_, { type => 'C_chain', length => $_[2]->{length} + $_[3]->{length} + 1 }, @_ ) } ],
    [ \&is_C_chain, \&is_C_chain, NO_MORE_VERTICES, sub { graph_replace( $_[0], { type => 'C_chain', length => $_[1]->{length} + $_[2]->{length} }, @_[1..2] ) } ],

    [ \&is_C, \&is_N, \&is_ketone, \&anything, NO_MORE_VERTICES, { type => 'amide' } ],

    [ \&is_N, \&is_C, NO_MORE_VERTICES, { type => 'cyano' } ],
    [ \&is_N, ( \&is_H ) x 3, { type => 'ammonia' } ],
    [ \&is_N, ( \&is_H ) x 2, \&anything, sub { graph_replace( $_[0], { type => 'NH2' }, @_[1..3] ) } ],
    [ \&is_NH2, \&is_NH2, NO_MORE_VERTICES, sub { graph_replace( $_[0], { type => 'hydrazine' }, @_[1..2] ) } ],
);

while( <> ) {
    chomp;

    my $parser = Chemistry::OpenSMILES::Parser->new;
    my( $graph ) = $parser->parse( $_ );
    Graph::Grammar::parse( $graph, @rules );

    for my $vertex ($graph->vertices) {
        $graph->set_vertex_attribute( $vertex, 'label', exists $vertex->{symbol} ? $vertex->{symbol} : $vertex->{type} );
    }

    my $writer = Graph::Writer::Dot->new;
    $writer->write_graph( $graph, '/dev/stdout' );
}
