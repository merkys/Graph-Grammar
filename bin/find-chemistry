#!/usr/bin/perl

use strict;
use warnings;

use Chemistry::OpenSMILES::Parser;
use Graph::Grammar;
use Graph::Grammar::Rule::NoMoreVertices;
use Scalar::Util qw( blessed );

sub is_C { return exists $_[1]->{symbol} && ucfirst( $_[1]->{symbol} ) eq 'C' }
sub is_H { return exists $_[1]->{symbol} && ucfirst( $_[1]->{symbol} ) eq 'H' }
sub is_O { return exists $_[1]->{symbol} && ucfirst( $_[1]->{symbol} ) eq 'O' }

my @rules = (
    [ \&is_O, \&is_C, \&is_H, Graph::Grammar::Rule::NoMoreVertices->new, { type => 'hydroxy' } ],
    [ \&is_C, \&is_C, ( \&is_H ) x 3, Graph::Grammar::Rule::NoMoreVertices->new, { type => 'alkane' } ],
);

while( <> ) {
    chomp;

    my $parser = Chemistry::OpenSMILES::Parser->new;
    my( $graph ) = $parser->parse( $_ );
    Graph::Grammar::parse( $graph, @rules );

    use Data::Dumper;
    print Dumper $graph->vertices;
}
